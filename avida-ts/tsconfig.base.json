{
  "$schema": "https://json.schemastore.org/tsconfig",
  "compilerOptions": {
    "strict": true,
    "strictNullChecks": true,
    "strictBindCallApply": true,
    "noImplicitAny": true,

    // target ESNext for modern features and tree-shaking
    "target": "ESNext",
    "module": "ESNext",

    // emit types and source maps for debugging and intellisense
    "declaration": true,
    "declarationMap": true,
    "sourceMap": true,

    // enable colors in terminal output for readability
    "pretty": true,

    // preserve jsdoc comments for intellisense when building and publishing packages
    "removeComments": false,

    // enable module resolution without file extensions on relative paths for things like npm package imports.
    "moduleResolution": "Bundler",

    // allow importing TypeScript files using their native extension (.ts(x)). -- astro rule
    // "allowImportingTsExtensions": true,

    // enable JSON imports
    "resolveJsonModule": true,

    // enforce the usage of type-only imports when needed to avoid bundling issues and improve performance
    "verbatimModuleSyntax": true,

    // ensure that each file can be transpiled without relying on other imports
    // this is redundant with the previous option however it ensures that it's on even if someone disables `verbatimModuleSyntax`
    "isolatedModules": true,

    // if configuring for Astro note that it can directly run TypeScript code without transpilation
    // "noEmit": true,

    // report an error when importing a file using a casing different from another import of the same file
    "forceConsistentCasingInFileNames": true,

    // properly support importing CJS modules in ESM
    "esModuleInterop": true,

    // skip typechecking libraries and .d.ts files for faster builds (and not deal with upstream type issues)
    "skipLibCheck": true,

    // allow JavaScript files to be imported (for example supports autocompletion in *.config.mjs files)
    "allowJs": true,

    // allow JSX files (or files that are internally considered JSX such as Astro files) to be imported inside `.js` and `.ts` files.
    "jsx": "preserve",

    // use the following instead of the above for astro and react component libraries/packages in the workspace
    // "jsx": "react-jsx",
    // "jsxImportSource": "react",

    // allow imports as default from ESM modules even if one isn't specified (vs. `import * as foo from 'foo'`)
    "allowSyntheticDefaultImports": true,

    // enforce additional rigour for stricter type safety
    "strictFunctionTypes": true,
    "strictPropertyInitialization": false,

    // a less restrictive eslint rule is used instead that allows unused locals if prefixed with an underscore
    "noUnusedLocals": false,

    // report an error when a parameter is declared but never used (set to `false` to prefer the eslint rule instead)
    "noUnusedParameters": true,

    // early returns are often used in dev and debug workflows so you may want to choose `true` or `false` accordingly
    // "allowUnreachableCode": false,

    // report an error when the value `undefined` is given to an optional property that doesn't specify `undefined` as a valid value
    // may want to override this to `false` for react libraries to support common props patterns with JSX
    "exactOptionalPropertyTypes": true,

    // report errors for fallthrough cases in switch statements (this helps eliminate bugs and improve code quality)
    "noFallthroughCasesInSwitch": true,

    // force functions designed to override their parent class to be specified as `override`
    "noImplicitOverride": true,

    // force functions to specify that they can return `undefined` if a possible code path does not return a value
    "noImplicitReturns": true,

    // force the usage of the indexed syntax to access fields declared using an index signature
    "noUncheckedIndexedAccess": true,

    // report an error for unused labels instead of just a warning
    "allowUnusedLabels": false

    // "types": ["node", "vitest/globals"]
  },

  // include @total-typescript reset for global type enhancements
  "include": ["reset.d.ts"]

  // "exclude": []
  // "exclude": ["node_modules", "cdk.out", "tmp", "wip", "notes"]

  // friendly warning:
  // at present astro may have issues if you use multiple `extends` in a tsconfig (typescript v5+ feature)
}
