{
  "contract_name": "avida-example",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "verifier"
    ],
    "properties": {
      "verifier": {
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "register_requirement"
        ],
        "properties": {
          "register_requirement": {
            "type": "object",
            "required": [
              "requirements"
            ],
            "properties": {
              "requirements": {
                "$ref": "#/definitions/RegisterRequirement"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "give_me_some_drink"
        ],
        "properties": {
          "give_me_some_drink": {
            "$ref": "#/definitions/GiveMeSomeDrink"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "give_me_some_food"
        ],
        "properties": {
          "give_me_some_food": {
            "$ref": "#/definitions/GiveMeSomeFood"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "GiveMeSomeDrink": {
        "type": "object",
        "required": [
          "kind",
          "proof"
        ],
        "properties": {
          "kind": {
            "type": "string"
          },
          "proof": {
            "$ref": "#/definitions/Binary"
          }
        },
        "additionalProperties": false
      },
      "GiveMeSomeFood": {
        "type": "object",
        "required": [
          "kind",
          "proof"
        ],
        "properties": {
          "kind": {
            "type": "string"
          },
          "proof": {
            "$ref": "#/definitions/Binary"
          }
        },
        "additionalProperties": false
      },
      "IssuerSourceOrData": {
        "description": "Location to obtain the verification data from",
        "type": "object",
        "required": [
          "data_or_location"
        ],
        "properties": {
          "data_or_location": {
            "description": "The data or location of the verification data at the trust registry For TrustRegistry::Cheqd, it is the `ResourceReqPacket` in avida-cheqd For data, the contracts should have the expected type In Sdjwt-Verifier, this is expected to be the JwkInfo struct",
            "allOf": [
              {
                "$ref": "#/definitions/Binary"
              }
            ]
          },
          "source": {
            "description": "If `None`, this means data is directly provided",
            "anyOf": [
              {
                "$ref": "#/definitions/TrustRegistry"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "RegisterRequirement": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "drink"
            ],
            "properties": {
              "drink": {
                "type": "object",
                "required": [
                  "requirements"
                ],
                "properties": {
                  "requirements": {
                    "$ref": "#/definitions/RouteVerificationRequirements"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "food"
            ],
            "properties": {
              "food": {
                "type": "object",
                "required": [
                  "requirements"
                ],
                "properties": {
                  "requirements": {
                    "$ref": "#/definitions/RouteVerificationRequirements"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "RouteVerificationRequirements": {
        "description": "Specific verification requirements for the route, by `route_id`",
        "type": "object",
        "required": [
          "issuer_source_or_data"
        ],
        "properties": {
          "issuer_source_or_data": {
            "description": "This defines where the source data for verification is",
            "type": "array",
            "items": {
              "$ref": "#/definitions/IssuerSourceOrData"
            }
          },
          "presentation_required": {
            "description": "The presentation request is the criteria required for the presentation, for example required certains claims to be disclosed This value is stored as `VerificationRequirements.presentation_required` on sdjwtVerifier",
            "anyOf": [
              {
                "$ref": "#/definitions/Binary"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "TrustRegistry": {
        "type": "string",
        "enum": [
          "cheqd"
        ]
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "type": "string",
    "enum": [
      "get_verifier_address"
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "get_verifier_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "String",
      "type": "string"
    }
  }
}
