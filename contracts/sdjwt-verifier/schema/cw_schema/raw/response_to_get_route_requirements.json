{
  "type": "v1",
  "root": 0,
  "definitions": [
    {
      "name": "avida_common_types_RouteVerificationRequirements",
      "description": "Specific verification requirements for the route, by `route_id`",
      "type": "struct",
      "properties": {
        "issuer_source_or_data": {
          "description": "This defines where the source data for verification is",
          "value": 5
        },
        "presentation_required": {
          "description": "The presentation request is the criteria required for the presentation,\nfor example required certains claims to be disclosed\nThis value is stored as `VerificationRequirements.presentation_required` on sdjwtVerifier",
          "value": 6
        }
      }
    },
    {
      "name": "avida_common_types_IssuerSourceOrData",
      "description": "Location to obtain the verification data from",
      "type": "struct",
      "properties": {
        "data_or_location": {
          "description": "The data or location of the verification data at the trust registry\nFor TrustRegistry::Cheqd, it is the `ResourceReqPacket` in avida-cheqd\nFor data, the contracts should have the expected type\nIn Sdjwt-Verifier, this is expected to be the JwkInfo struct",
          "value": 4
        },
        "source": {
          "description": "If `None`, this means data is directly provided",
          "value": 3
        }
      }
    },
    {
      "name": "avida_common_types_TrustRegistry",
      "type": "enum",
      "cases": {
        "cheqd": {
          "type": "unit"
        }
      }
    },
    {
      "name": "core::option::Option<avida_common::types::TrustRegistry>",
      "type": "optional",
      "inner": 2
    },
    {
      "name": "cosmwasm_std_binary_Binary",
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization\nwith serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>.\nSee also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "binary"
    },
    {
      "name": "alloc::vec::Vec<avida_common::types::IssuerSourceOrData>",
      "type": "array",
      "items": 1
    },
    {
      "name": "core::option::Option<cosmwasm_std::binary::Binary>",
      "type": "optional",
      "inner": 4
    }
  ]
}
