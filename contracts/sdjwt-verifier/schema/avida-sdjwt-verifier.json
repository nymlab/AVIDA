{
  "contract_name": "avida-sdjwt-verifier",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "init_registrations",
      "max_presentation_len"
    ],
    "properties": {
      "init_registrations": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/InitRegistration"
        }
      },
      "max_presentation_len": {
        "type": "integer",
        "format": "uint",
        "minimum": 0.0
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "InitRegistration": {
        "type": "object",
        "required": [
          "app_addr",
          "app_admin",
          "routes"
        ],
        "properties": {
          "app_addr": {
            "type": "string"
          },
          "app_admin": {
            "type": "string"
          },
          "routes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/RegisterRouteRequest"
            }
          }
        },
        "additionalProperties": false
      },
      "IssuerSourceOrData": {
        "description": "Location to obtain the verification data from",
        "type": "object",
        "required": [
          "data_or_location"
        ],
        "properties": {
          "data_or_location": {
            "description": "The data or location of the verification data at the trust registry For TrustRegistry::Cheqd, it is the `ResourceReqPacket` in avida-cheqd For data, the contracts should have the expected type In Sdjwt-Verifier, this is expected to be the JwkInfo struct",
            "allOf": [
              {
                "$ref": "#/definitions/Binary"
              }
            ]
          },
          "source": {
            "description": "If `None`, this means data is directly provided",
            "anyOf": [
              {
                "$ref": "#/definitions/TrustRegistry"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "RegisterRouteRequest": {
        "description": "Routes Requiments used in Registration (and Initiation)",
        "type": "object",
        "required": [
          "requirements",
          "route_id"
        ],
        "properties": {
          "requirements": {
            "$ref": "#/definitions/RouteVerificationRequirements"
          },
          "route_id": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "RouteVerificationRequirements": {
        "description": "Specific verification requirements for the route, by `route_id`",
        "type": "object",
        "required": [
          "issuer_source_or_data"
        ],
        "properties": {
          "issuer_source_or_data": {
            "description": "This defines where the source data for verification is",
            "type": "array",
            "items": {
              "$ref": "#/definitions/IssuerSourceOrData"
            }
          },
          "presentation_required": {
            "description": "The presentation request is the criteria required for the presentation, for example required certains claims to be disclosed This value is stored as `VerificationRequirements.presentation_required` on sdjwtVerifier",
            "anyOf": [
              {
                "$ref": "#/definitions/Binary"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "TrustRegistry": {
        "type": "string",
        "enum": [
          "cheqd"
        ]
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "update_revocation_list"
        ],
        "properties": {
          "update_revocation_list": {
            "type": "object",
            "required": [
              "app_addr",
              "request"
            ],
            "properties": {
              "app_addr": {
                "type": "string"
              },
              "request": {
                "$ref": "#/definitions/UpdateRevocationListRequest"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "register"
        ],
        "properties": {
          "register": {
            "type": "object",
            "required": [
              "app_addr",
              "requests"
            ],
            "properties": {
              "app_addr": {
                "type": "string"
              },
              "requests": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RegisterRouteRequest"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "verify"
        ],
        "properties": {
          "verify": {
            "type": "object",
            "required": [
              "presentation",
              "route_id"
            ],
            "properties": {
              "additional_requirements": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Binary"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "app_addr": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "presentation": {
                "$ref": "#/definitions/Binary"
              },
              "route_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update"
        ],
        "properties": {
          "update": {
            "type": "object",
            "required": [
              "app_addr",
              "route_id"
            ],
            "properties": {
              "app_addr": {
                "type": "string"
              },
              "route_criteria": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/RouteVerificationRequirements"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "route_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "deregister"
        ],
        "properties": {
          "deregister": {
            "type": "object",
            "required": [
              "app_addr"
            ],
            "properties": {
              "app_addr": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "IssuerSourceOrData": {
        "description": "Location to obtain the verification data from",
        "type": "object",
        "required": [
          "data_or_location"
        ],
        "properties": {
          "data_or_location": {
            "description": "The data or location of the verification data at the trust registry For TrustRegistry::Cheqd, it is the `ResourceReqPacket` in avida-cheqd For data, the contracts should have the expected type In Sdjwt-Verifier, this is expected to be the JwkInfo struct",
            "allOf": [
              {
                "$ref": "#/definitions/Binary"
              }
            ]
          },
          "source": {
            "description": "If `None`, this means data is directly provided",
            "anyOf": [
              {
                "$ref": "#/definitions/TrustRegistry"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "RegisterRouteRequest": {
        "description": "Routes Requiments used in Registration (and Initiation)",
        "type": "object",
        "required": [
          "requirements",
          "route_id"
        ],
        "properties": {
          "requirements": {
            "$ref": "#/definitions/RouteVerificationRequirements"
          },
          "route_id": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "RouteVerificationRequirements": {
        "description": "Specific verification requirements for the route, by `route_id`",
        "type": "object",
        "required": [
          "issuer_source_or_data"
        ],
        "properties": {
          "issuer_source_or_data": {
            "description": "This defines where the source data for verification is",
            "type": "array",
            "items": {
              "$ref": "#/definitions/IssuerSourceOrData"
            }
          },
          "presentation_required": {
            "description": "The presentation request is the criteria required for the presentation, for example required certains claims to be disclosed This value is stored as `VerificationRequirements.presentation_required` on sdjwtVerifier",
            "anyOf": [
              {
                "$ref": "#/definitions/Binary"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "TrustRegistry": {
        "type": "string",
        "enum": [
          "cheqd"
        ]
      },
      "UpdateRevocationListRequest": {
        "description": "A Sd-jwt specific requirement for revocation list update using Criterion::NotContainedIn",
        "type": "object",
        "required": [
          "revoke",
          "route_id",
          "unrevoke"
        ],
        "properties": {
          "revoke": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "route_id": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "unrevoke": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "get_route_verification_key"
        ],
        "properties": {
          "get_route_verification_key": {
            "type": "object",
            "required": [
              "app_addr",
              "route_id"
            ],
            "properties": {
              "app_addr": {
                "type": "string"
              },
              "route_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_app_admin"
        ],
        "properties": {
          "get_app_admin": {
            "type": "object",
            "required": [
              "app_addr"
            ],
            "properties": {
              "app_addr": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_routes"
        ],
        "properties": {
          "get_routes": {
            "type": "object",
            "required": [
              "app_addr"
            ],
            "properties": {
              "app_addr": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_route_requirements"
        ],
        "properties": {
          "get_route_requirements": {
            "type": "object",
            "required": [
              "app_addr",
              "route_id"
            ],
            "properties": {
              "app_addr": {
                "type": "string"
              },
              "route_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "get_app_admin": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "String",
      "type": "string"
    },
    "get_route_requirements": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RouteVerificationRequirements",
      "description": "Specific verification requirements for the route, by `route_id`",
      "type": "object",
      "required": [
        "issuer_source_or_data"
      ],
      "properties": {
        "issuer_source_or_data": {
          "description": "This defines where the source data for verification is",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IssuerSourceOrData"
          }
        },
        "presentation_required": {
          "description": "The presentation request is the criteria required for the presentation, for example required certains claims to be disclosed This value is stored as `VerificationRequirements.presentation_required` on sdjwtVerifier",
          "anyOf": [
            {
              "$ref": "#/definitions/Binary"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "IssuerSourceOrData": {
          "description": "Location to obtain the verification data from",
          "type": "object",
          "required": [
            "data_or_location"
          ],
          "properties": {
            "data_or_location": {
              "description": "The data or location of the verification data at the trust registry For TrustRegistry::Cheqd, it is the `ResourceReqPacket` in avida-cheqd For data, the contracts should have the expected type In Sdjwt-Verifier, this is expected to be the JwkInfo struct",
              "allOf": [
                {
                  "$ref": "#/definitions/Binary"
                }
              ]
            },
            "source": {
              "description": "If `None`, this means data is directly provided",
              "anyOf": [
                {
                  "$ref": "#/definitions/TrustRegistry"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "TrustRegistry": {
          "type": "string",
          "enum": [
            "cheqd"
          ]
        }
      }
    },
    "get_route_verification_key": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_String",
      "type": [
        "string",
        "null"
      ]
    },
    "get_routes": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_uint64",
      "type": "array",
      "items": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      }
    }
  }
}
